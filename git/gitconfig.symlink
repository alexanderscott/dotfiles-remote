
[core]
	editor = /usr/bin/vim -f
	excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes
    # Treat spaces before tabs, lines that are indented with 8 or more spaces, and
    # all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of
    # a line
    whitespace = space-before-tab,indent-with-non-tab,trailing-space
    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

[github]
	user = alexanderscott

[bitbucket]
    user = alexanderscott

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix


# Color prefs
[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true


# URL shorthands
[url "git@github.com:"]
        insteadOf = "gh:"
        pushInsteadOf = "github:"
        pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
        insteadOf = "github:"
[url "git@gist.github.com:"]
        insteadOf = "gst:"
        pushInsteadOf = "gist:"
        pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
        insteadOf = "gist:"

[push]
        default = matching

[alias]
        fetch-upstream-merge = !"git fetch origin -v; git fetch upstream -v; git merge upstream/master"
  aa = add --all
  br = branch -a
  s = status -u -s
  cl = log --stat -C -2
  c = commit
  co = checkout
  d = diff --color-words
  dh = diff HEAD
  dc = diff --staged
  dw = diff --word-diff
  dcw = diff --color-words
  ds = !git diff | subl
  dv = !git diff | vim
  who = shortlog -s --
  ph = push
  pl = pull
  lp = log -p
  lod = log --oneline --decorate
  lg = log --graph
  lpo = log --pretty=oneline --abbrev-commit --graph --decorate --all
  l1 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  l2 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  l3 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  spull = !git-svn fetch && git-svn rebase
  spush = !git-svn dcommit
  sync = !git pull && git push
  es = !git pull --rebase && git push
  lf = log --pretty=fuller
  ignorechanges = update-index --assume-unchanged
  noticechanges = update-index --no-assume-unchanged
  gc-ap = gc --aggressive --prune
  listconf = config --global --list
  cam = commit -a -m
  lsm = log -M --stat
  hse = log --stat -5
  diffall = diff HEAD
  logr = log -M
  logr2 = log --stat -M -2
  logit = log --stat -M
  scrub = !git reset --hard && git clean -fd
    pubdev = !git pub checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf
  pub = push -u origin
  cs = status
  rv = remote -v
  lwr = log --stat -C
  pur = pull --rebase
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  orphank = !gitk --all `git reflog | cut -c1-7`&
  orphanl = !git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`
  k = !exec gitk --all&
  testecho1 = !sh -c 'echo with slash: zero=$0 one=$1 two=$2' -
  # te1 RESULT: with slash: zero=- one=A two=B
  testecho2 = !sh -c 'echo without slash: zero=$0 one=$1 two=$2'
  # te2 RESULT: without slash: zero=A one=B two=C
  st = status
  l = log --stat -C
  ll = log --stat -C -3
  servehere = daemon --verbose --informative-errors --reuseaddr --export-all --base-path=. --enable=receive-pack
  purgeme = !git clean -fd && git reset --hard
  prunenow = gc --prune=now
  ri = rebase --interactive --autosquash
  lol = log --pretty=oneline --graph --abbrev-commit --all
  blg = log --graph --decorate --all --abbrev-commit --pretty=oneline
  slog = log --graph --simplify-by-decoration --all --abbrev-commit --pretty=oneline
  lgso = log --graph --date=short --pretty=format:'%C(yellow)%h%Creset %cn%x09%cd %s%C(green bold)%d'
  ro = !git fetch origin && git reset --hard origin/master
  shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
  pushnotes = !sh -c 'git push $1 refs/notes/*' -
  fetchnotes = !sh -c 'git fetch $1 refs/notes/*:refs/notes/*' -
  showignored = clean -ndX
  showignored2 = ls-files --others --ignored --exclude-standard
  showuntracked = ls-files --others --exclude-standard
  rmmissing = !git rm $(git ls-files --deleted)
  mergekeepoursonly = merge -s ours
  redocommit = reset --soft HEAD^
  listunstaged = diff --name-status
  liststaged = diff --name-status --staged
  listhistory = log --name-status
  logn = log --oneline --name-only
  busypeople = shortlog -6
  busythisweek = shortlog --since=one.week.ago
  configpushtracking = config push.default tracking
  configpushnothing = config push.default nothing
  configpushtracking = config push.default matching
  configpushcurrent = config push.default current

  # Other alias ideas that don't quite work yet
  #testnewrepodoesntwork1 = !echo git init $1 && echo cd $1
  #testnewrepodoesntwork2 = !sh -c 'git init $1; echo hi' -
  #testnewrepodoesntwork3 = "!f() { git init $1}; f"
  nr = "!sh -c 'git init $0'"
  echoparam1 = "!sh -c 'echo $0'"
  #testshfunction = "!function gitme() { git init $1; cd $1; }; gitme"

  fixup = "!sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
  squash = "!sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
  ccfq = "!sh -c 'git add $1 && git commit -m\"Placeholder\"' -"
  logme = log --author=Matthew --stat -C
  cob = checkout -b
  sno = show --name-only
  logsimple = log --graph --abbrev-commit --pretty=oneline --all --decorate
  gwcl = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  rlog = log --color-words --stat -3
  lm = log --stat -M

  # Legit
  legitsync = !legit sync \"$@\"
  legitswitch = !legit switch \"$@\"
  legitbranches = !legit branches
  legitsprout = !legit sprout \"$@\"
  legitunpublish = !legit unpublish \"$@\"
  legitharvest = !legit harvest \"$@\"
  legitpublish = !legit publish \"$@\"
  legitgraft = !legit graft \"$@\"

  #Searches
  findjuniodeletes = log --author=Junio --diff-filter=D --since=2.years.ago

  #https://git.wiki.kernel.org/index.php?title=Aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
  abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
  oneline ="!_() { $(test $# -eq 0 && echo xargs -L1) git log --no-walk --decorate --oneline \"$@\"; }; _"
  tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"
  empty-tree-sha1 = hash-object -t tree /dev/null
  whitespaceviolations = "!git diff --check $(git empty-tree-sha1)"
  patchforthis = "!git diff -p $(git empty-tree-sha1)"
  tagcontains = git tag -l --contains HEAD
  cc-cache = "config --global credential.helper 'cache --timeout=300'"
  cc-off = "config --unset --global credential.helper"
  cc-helperosx = "config --global credential.helper 'osxkeychain'"
  #cc-helperwin = "config --global credential.helper 'wincred'"
  #cc-helperlin = "config --global credential.helper '/pathto/git-credential-gnome-key'"
  logm = log --stat -M
  logcpy = log --stat -1 -C -C
  pushsvn = svn dcommit
  pullsvn = svn rebase
  nfjsunpushed = log origin/master..master --oneline
  rtheirs = !git checkout --theirs ./ && git add . && git rebase --continue
  logfive = log --graph --pretty=oneline --abbrev-commit --decorate --all -5
  noderelnotes = git log --graph --pretty=format:'%h%d %s (%an)'
  configsimplelog = config format.pretty oneline


[gist]
  private = yes
  browse = yes
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
